通过以下命令来检查MySQL服务器是否启动：#ps -ef | grep mysqld  如果MySQL已经启动，以上命令将输出MySQL进程列表.

你可以使用以下命令来启动MySQL服务器:#systemctl start mariadb.service

登录：$mysql -u root -p -P 3306 -h 127.0.0.0

退出: $exit

显示当前版本：
a.Not logged in:#mysql -V
b.Is logged in:#SELECT VERSION();

客户端输出乱码：SET NAMES GBK;

修改mysql密码为1234：SET PASSWORD＝PASSWORD('1234');

MySQL 用户设置>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

如果你需要添加 MySQL 用户，你只需要在 MySQL 数据库中的 user 表添加新用户即可。
以下为添加用户的的实例，用户名为guest，密码为guest123，并授权用户可进行 SELECT, INSERT 和 UPDATE操作权限：
root@host# mysql -u root -p
Enter password:*******
mysql> use mysql;

Database changed

mysql> INSERT INTO user 
          (host, user, password, 
           select_priv, insert_priv, update_priv) 
           VALUES ('localhost', 'guest', 
           PASSWORD('guest123'), 'Y', 'Y', 'Y');
Query OK, 1 row affected (0.20 sec)

mysql> FLUSH PRIVILEGES;
Query OK, 1 row affected (0.01 sec)

mysql> SELECT host, user, password FROM user WHERE user = 'guest';
+-----------+---------+------------------+
| host      | user    | password         |
+-----------+---------+------------------+
| localhost | guest | 6f8c114b58f2ce9e |
+-----------+---------+---
 注意：再注意需要执行 FLUSH PRIVILEGES 语句。 这个命令执行后会重新载入授权表。

你可以在创建用户时，为用户指定权限，在对应的权限列中，在插入语句中设置为 'Y' 即可，用户权限列表如下：

    Select_priv
    Insert_priv
    Update_priv
    Delete_priv
    Create_priv
    Drop_priv
    Reload_priv
    Shutdown_priv
    Process_priv
    File_priv
    Grant_priv
    References_priv
    Index_priv
    Alter_priv



另外一种添加用户的方法为通过SQL的 GRANT 命令，你下命令会给指定数据库TUTORIALS添加用户 zara ，密码为 zara123 。

root@host# mysql -u root -p password;
Enter password:*******
mysql> use mysql;
Database changed

mysql> GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP
    -> ON TUTORIALS.*
    -> TO 'zara'@'localhost'
    -> IDENTIFIED BY 'zara123';

以上命令会在MySQL数据库中的user表创建一条用户信息记录。 

MySQL 用户设置<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

使用 mysqladmin 工具来获取服务器状态:[root@host]# mysqladmin --version

显示当前日期时间：SELECT NOW();

显示当前用户：SELECT USER();

mysql语名的规范:
    a.关键字与函数名称全部大写，
    b.数据库名称，表名称，字段名称全部小写。

[数据库]
要在MySQL中创建数据库，请使用CREATE DATABASE语句，如下：
CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] database_name [DEFAULT] CHARACTER SET [=] charset_name;
ps:CREATE DATABASE IF NOT EXISTS test DEFAULT CHARARTER SET = utf8;

SHOW DATABASES: 列出 MySQL 数据库管理系统的数据库列表。

要删除数据库，请使用DROP DATABASE语句，如下所示：
DROP {DATABASE | SCHEMA} [IF EXISTS] database_name;

查看warning信息：SHOW WARNINGS;

查看创建数据库时的编码方式:SHOW CREATE DATABASE database_name;

修改数据库编码：ALTER {DATABASE | SCHEMA} [db_name] [DEFAULT] CHARACTER SET [=] charset_name;



[类型]
notes:保存的时间用时间戳,因为有时区的问题存在。

字符串类型ENUM('value1','value2',...)用法是在指定的数值中取一个值，比如男女
字符串类型SET('value1','value2',...)用法是在指定的数集中取任意值，比如爱好.




[数据表]
USE 数据库名 :选择要操作的MySQL数据库，使用该命令后所有MySQL命令都只针对该数据库。

查看当前数据库:SELECT DATABASE();

SHOW TABLES: 显示指定数据库的所有表

查看数据库
SHOW TABLES [FROM db_name] [LIKE 'pattern' | WHERE expr];

创建数据表:
CREATE TABLE [IF NOT EXITS] table_name(
	column_name data_type,
	......
) engine=table_type;


查看创建数据库时:SHOW CREATE TABLE table_name;

PS:
MariaDB [king]> CREATE TABLE user(
    -> username VARCHAR(20),
    -> age TINYINT UNSIGNED,
    -> salary FLOAT(8,2) UNSIGNED
    -> );

note:unsigned是无符号位的意思.

SHOW COLUMNS FROM table_name: 显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。

INSERT [INTO] table_name [(col_name,...)] VALUES(val,...);


SHOW INDEX FROM 数据表: 显示数据表的详细索引信息，包括PRIMARY KEY（主键）。

SHOW TABLE STATUS LIKE 数据表\G: 该命令将输出MySQL数据库管理系统的性能及统计信息。

查看数据表：
SELECT expr,... FROM table_name;

NULL and NOT NULL:
CREATE TABLE tb2(
   -> username VARCHAR(20) NOT NULL,
   -> age TINYINT UNSIGNED NULL
   -> );


查看数据结构：
SHOW COLUMNS FROM table_name;

[约束]
主键PRIMARY KEY：
a.主键约束.
b.每张表只能有一个主键.
c.主键自动为NOT NULL.
d.主键保证记录的唯一性.

AUTO_INCREMENT:
CREATE TABLE tb3(
	 id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY, 
	 username VARCHAR(30) NOT NULL 
	 );


UNIQUE KEY:
a.唯一约束.
b.唯一约束可以保证记录的唯一性.
c.唯一约束的字段可以为空值
d.每张表可以存在多个唯一约束
CREATE TABLE tb5(
   -> id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
   -> username VARCHAR(20) NOT NULL UNIQUE KEY,
   -> age TINYINT UNSIGNED
   -> );


DEFAULT值:
CREATE TABLE tb6(
    -> id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    -> username VARCHAR(20) NOT NULL UNIQUE KEY,
    -> sex ENUM('1','2','3') DEFAULT '3'
    -> );

FOREIGN KEY(外键约束):
1.保持数据一致性，完整性。
2.实现一对一或一对多关系。


外键约束的要求：
1.父表和子表必须使用相同的存储引擎，而且禁止使用临时表。
2.数据表的存储引擎只能为InnoDB.
3.外键列和参照列必须具有相似的数据类型。其中数字的长度或是有符号位必须相同；而字符的长度则可以不同。
4.外键列和参照列必须创建索引。如果外键列不存在索引的话，MySQL将自动创建索引。

MariaDB [king]> CREATE TABLE provinces(
    -> id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    -> pname VARCHAR(20) NOT NULL
    -> );

MariaDB [king]> CREATE TABLE users(
    -> id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    -> username VARCHAR(10) NOT NULL,
    -> pid SMALLINT UNSIGNED,
    -> FOREIGN KEY (pid) REFERENCES provinces (id)
    -> );



查看索引:MariaDB [king]> show indexes from table_name\G;

编辑数据表的默认存储引擎
MySQL配直文件(my.ini)>>default-storage-engine=INNODB


约束:
1.约束保证数据的完整性和一致性。
2.约束分为表级约束和列级约束。
3.约束类型包括：
	NOT NULL(非空约束)
	PRIMARY KEY(主键约束)
	UNIQUE KYE(唯一约束)
	DEFAULT(默认约束)
	FOREIGN KEY(外键约束)


外键约束的参数(数据表必须为INNODB)：
1.CASCADE:从父表删除或更新且自动删除或更新子表中匹配的行。(同步删除或更新，ps:删除文章时，对应的文章评论也会同步删除)
2.SET NULL：从父表删除或更新行，并设置子表中的外键列为NULL。如果使用该选项，必须保证子表列没有指定NOT NULL。
3.RESTRICT：拒对父表的删除或更新操作。
4.NO ACTION：标准SQL的关键字，在MySQL中与RESTRICT相同。


MariaDB [king]> CREATE TABLE users1(
    -> id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    -> username VARCHAR(10) NOT NULL,
    -> pid SMALLINT UNSIGNED,
    -> FOREIGN KEY (pid) REFERENCES provinces (id) ON DELETE CASCADE
    -> );


表级约束与列级约束
1.对一个数据列建立的约束，称为列级约束。
2.对多个数据列建立的约束，称为表级约束。
3.列级约束既可以在列定义的时声明，也可以在列定义后声明。表级约束只能在列定义后声明。

[修改数据表]
添加单列：
ALTER TABLE table_name ADD [COLUMN] col_name column_definition [FIRST | AFTER col_name]; 

添加多列：ALTER TABLE table_name ADD [COLUMN] (col_name column_defination,...);

删除列：
ALTER TABLE table_name DROP [COLUMN] col_name;

删除多列：
ALTER TABLE table_name DROP [COLUMN] col_name1，col_name2,...;

添加主键约束：
ALTER TABLE table_name ADD [CONSTRAINT [symbol]] PRIMARY KEY [index_type](index_col_name,...);
ps:MariaDB [king]> ALTER TABLE users2 ADD CONSTRAINT PK_users2_id PRIMARY KEY(id);

添加唯一约束：
ALTER TABLE table_name ADD [CONSTRAINT [symbol]] UNIQUE [INDEX|key][index_name] [index_type] (index_col_name,...);
ps:MariaDB [king]> ALTER TABLE users2 ADD UNIQUE (username);

添加外键约束：
ALTER TABLE table_name ADD [CONSTRAINT [symbol]] FOREIGN KEY [index_name] (index_col_name,...) reference_defination;
ps:MariaDB [king]> ALTER TABLE users2 ADD FOREIGN KEY (pid) REFERENCES provinces(id);

添加／删除默认约束：
ALTER TABLE table_name ALTER [COLUMN] col_name {SET DEFAULT literal | DROP DEFAULT}
PS:MariaDB [king]> ALTER TABLE users2 ALTER age SET DEFAULT 22;

删除主键约束：
ALTER TABLE table_name DROP PRIMARY KEY;

删除唯一约束：
ALTER TABLE table_name DROP {INDEX|KEY} index_name;
ps:MariaDB [king]> ALTER TABLE users2 DROP INDEX username;

删除外键约束：
ALTER TABLE table_name DROP FOREIGN KEY fk_symbol;
ps:
show create table users2;
ALTER TABLE users2 DROP  FOREIGN KEY users2_ibfk_1;
注：外键约束的名字users2_ibfk_1是通过show create table users2;查看。

修改列定义：
ALTER TABLE table_name MODIFY [COLUMN] col_name column_defination [FIRST|AFTER col_name];

修改列名称：
ALTER TABLE table_name CHANGE [COLUMN] old_col_name new_col_name column_defination [FIRST | AFTER col_name];

修改数据表名：
方法1：ALTER TABLE table_name RENAME [TO|AS] new_table_name;
方法2：RENAME TABLE table_name TO new_table_name [,table_name2 TO new_table_name2]...;


[操作数据表中的记录]
插入记录方法1：
INSERT 「INTO」 table_name [(col_name,...)] {VALUES|VALUE} ({expr| DEFAULT},...),(...),...;
ps:
CREATE TABLE users(
    -> id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    -> username VARCHAR(20) NOT NULL,
    -> password VARCHAR(32) NOT NULL,
    -> age TINYINT UNSIGNED NOT NULL DEFAULT 10,
    -> sex BOOLEAN
    -> );
MariaDB [king]> INSERT INTO users  VALUES(NULL,'Tom','123',25,1);
MariaDB [king]> INSERT INTO users  VALUES(DEFAULT,'jing','123',25,1);
MariaDB [king]> INSERT users VALUES(DEFAULT,'lanpei','123',20-2,1);
MariaDB [king]> INSERT users VALUES(DEFAULT,'XIAOi','123',DEFAULT,1);
MariaDB [king]> INSERT users VALUES(DEFAULT,'user1','123',DEFAULT,1),(NULL,'user2',md5('123'),3*7-7,1);
注：不指定插入列，自增id的值可以写成NULL或DEFAULT。


插入记录方法2：
与第一种方式的区别在于，此方法可以使用子查询（SubQuery)
INSERT [INTO] table_name SET col_name={expr|DEFAULT},...;
ps:
 INSERT INTO users SET username='rose',password='357';

插入记录方法3：
INSERT 「INTO」 table_name [(col_name,...)] SELECT ...;
ps:
MariaDB [king]> INSERT INTO test(username) SELECT username FROM users WHERE age >=20;(插入从第二个表中查询出的数据。）

更改记录(UPDATE)
单表更新：
UPDATE [LOW_PRIORITY] [IGNORE] table_reference SET col_name1={expr1|DEFAULT} [,col_name2={expr2|DEFAULT}]... [WHERE where_condition];
ps:
MariaDB [king]> UPDATE users SET age=age+3;
MariaDB [king]> UPDATE users set age=age-id,sex=0 where id<3;
MariaDB [king]> UPDATE users SET age=age+10 where id%2=0;

删除记录(DELETE)
DELETE FROM table_name [WHERE where_condition];
ps:
MariaDB [king]> delete from users where id=6;

查找记录：
SELECT select_expr [,select_expr ...]
    [
        FROM   table_references
        [WHERE where_condition]
        [GROUP BY {col_name|position} [ASC|DESC],...]
        [HAVING where_condition]
        [ORDER BY {col_name|expr|position} [ASC|DESC],...]
        [LIMIT {[offset,] row_count | row_count OFFSET offset}]
    ];
查询表达式：
1.每个表达式表示想要的一列，必须有至少一个。
2.多个列之间以英文逗号分隔。
3.星号(*)表示所有列。tab_name.col_name表示某个表的某一列。
4.查询表达式可以使用[AS] alias_name为其赋予别名。
5.别名可用于GROUP BY ,ORDRE BY 或HAVING子句。
ps:
MariaDB [king]> select id,username from users where id%2=0;
MariaDB [king]> select id,username AS uname from users;

条件表达式：
1.对记录进行过滤，如果没有指定WHERE子句，则显示所有记录。
2.在WHERE表达式中，可以使用MySQL去持的函数或运算符。

查询结果分组：
[GROUP BY {col_name | positioin} [ASC|DESC],...];
ps:
MariaDB [king]> select sex from users group by sex;

分组条件(HAVING):
[HAVING where_condition]
ps:
MariaDB [king]> SELECT sex,age FROM users GROUP BY sex HAVING age > 20;
MariaDB [king]> SELECT sex,age FROM users GROUP BY sex HAVING count(id) >= 3;

查询排序：
[ORDER BY {col_name | expr | position} [ASC|DESC],...];
PS:
MariaDB [king]> SELECT * FROM users ORDER BY id DESC;
MariaDB [king]> SELECT * FROM users ORDER BY age ASC,id DESC;


限制数量：
[LIMIT {[offset,] row_count | row_count OFFSET offset}];
PS:
MariaDB [king]> SELECT * FROM users LIMIT 2;
MariaDB [king]> SELECT * FROM users LIMIT 2,4;(注：从下标为2的数据开始，取4条数据。数据表下标从0开始。）


[子查询」

数据>>>>>>>>>>>>>>>>>>>
  -- 创建数据表

  CREATE TABLE IF NOT EXISTS tdb_goods(
    goods_id    SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    goods_name  VARCHAR(150) NOT NULL,
    goods_cate  VARCHAR(40)  NOT NULL,
    brand_name  VARCHAR(40)  NOT NULL,
    goods_price DECIMAL(15,3) UNSIGNED NOT NULL DEFAULT 0,
    is_show     BOOLEAN NOT NULL DEFAULT 1,
    is_saleoff  BOOLEAN NOT NULL DEFAULT 0
  );

 -- 写入记录

 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('R510VC 15.6英寸笔记本','笔记本','华硕','3399',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('Y400N 14.0英寸笔记本电脑','笔记本','联想','4899',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('G150TH 15.6英寸游戏本','游戏本','雷神','8499',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('X550CC 15.6英寸笔记本','笔记本','华硕','2799',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('X240(20ALA0EYCD) 12.5英寸超极本','超级本','联想','4999',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('U330P 13.3英寸超极本','超级本','联想','4299',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('SVP13226SCB 13.3英寸触控超极本','超级本','索尼','7999',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('iPad mini MD531CH/A 7.9英寸平板电脑','平板电脑','苹果','1998',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('iPad Air MD788CH/A 9.7英寸平板电脑 （16G WiFi版）','平板电脑','苹果','3388',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES(' iPad mini ME279CH/A 配备 Retina 显示屏 7.9英寸平板电脑 （16G WiFi版）','平板电脑','苹果','2788',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('IdeaCentre C340 20英寸一体电脑 ','台式机','联想','3499',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('Vostro 3800-R1206 台式电脑','台式机','戴尔','2899',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('iMac ME086CH/A 21.5英寸一体电脑','台式机','苹果','9188',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('AT7-7414LP 台式电脑 （i5-3450四核 4G 500G 2G独显 DVD 键鼠 Linux ）','台式机','宏碁','3699',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('Z220SFF F4F06PA工作站','服务器/工作站','惠普','4288',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('PowerEdge T110 II服务器','服务器/工作站','戴尔','5388',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('Mac Pro MD878CH/A 专业级台式电脑','服务器/工作站','苹果','28888',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES(' HMZ-T3W 头戴显示设备','笔记本配件','索尼','6999',DEFAULT,DEFAULT);

 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('商务双肩背包','笔记本配件','索尼','99',DEFAULT,DEFAULT);

 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('X3250 M4机架式服务器 2583i14','服务器/工作站','IBM','6888',DEFAULT,DEFAULT);
 
 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('玄龙精英版 笔记本散热器','笔记本配件','九州风神','',DEFAULT,DEFAULT);

 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES(' HMZ-T3W 头戴显示设备','笔记本配件','索尼','6999',DEFAULT,DEFAULT);

 INSERT tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) VALUES('商务双肩背包','笔记本配件','索尼','99',DEFAULT,DEFAULT);
数据<<<<<<<<<<<<<<<<<<<<


子查询是指在另一个查询语句中的SELECT子句。

例句：SELECT * FROM t1 WHERE column1 = (SELECT column1 FROM t2);
其中，SELECT * FROM t1 ...称为Outer Query[外查询](或者Outer Statement),
SELECT column1 FROM t2 称为Sub Query[子查询]。

所以，我们说子查询是嵌套在外查询内部。而事实上它有可能在子查询内部再嵌套子查询。
子查询必须出现在圆括号之间。

使用比较运算符的子查询：＝、>、<、>=、<=、<>、!=、<=>
语法结构：
operand comparison_operator subquery
ps:
MariaDB [king]> SELECT * FROM tdb_goods WHERE goods_price >= (SELECT AVG(goods_price) FROM tdb_goods);

子查询的修饰：ANY，SOM，ALL关键字
当子查询返回的行数大于一条时，要用修饰词修饰。
ANY和SOME的意义用法一样，都是满足其中一个条件即可，ALL是要满足所有条件。
MariaDB [king]> SELECT *  FROM tdb_goods WHERE goods_price >= all(SELECT goods_price FROM tdb_goods WHERE goods_cate = '超级本');


使用[NOT] IN 的子查询：
语法结构：
operand comparison_operator [NOT] IN(subquery);
=ANY 运算符与IN等效.
!=ALL或<>ALL运算符与NOT IN 等效。
PS：
MariaDB [king]> SELECT *  FROM tdb_goods WHERE goods_price IN(SELECT goods_price FROM tdb_goods WHERE goods_cate = '超级本');

使用[NOT] EXISTS的子查询：
如果子查询返回任何行，EXISTS将返回TRUE；否则为FALSE；

MariaDB [king]> CREATE TABLE IF NOT EXISTS tdb_goods_cates(
    -> cate_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    -> cate_name VARCHAR(40) NOT NULL
    -> );

MariaDB [king]> SELECT goods_cate FROM tdb_goods_cates GROUP BY goods_cate;

MariaDB [king]> INSERT INTO tdb_goods_cates(cate_name) SELECT goods_cate FROM tdb_goods GROUP BY goods_cate;


多表更新：
UPDATE table_references SET col_name1={expr1|DEFAULT} 
[,col_name2={expr2|DEFAULT}]...
[WHERE where_condition];

PS:重点：根据另外的表更新本表的记录，不用人工去一个一个修改。
MariaDB [king]> UPDATE tdb_goods INNER JOIN tdb_goods_cates ON goods_cate = cate_name SET goods_cate = cate_id;


CREATE...SELECT
创建数据表同时将查询结果写入到数据表
CREATE TABLE [IF NOT EXISTS] table_name [(create_definition,...)] select_statement;
PS:(创建数据表同时将查询结果写入到数据表)
MariaDB [king]> CREATE TABLE tdb_goods_brands(
    -> brand_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    -> brand_name VARCHAR(40) NOT NULL
    -> )
    -> SELECT brand_name FROM tdb_goods GROUP BY brand_name;

MariaDB [king]> UPDATE tdb_goods INNER JOIN tdb_goods_brands ON tdb_goods.brand_name = tdb_goods_brands.brand_name 
    -> SET tdb_goods.brand_name = brand_id;


[连接]
table_reference {[INNER|CROSS] JOIN |{LEFT|RIGHT} [OUTER] JOIN } table_reference ON conditional_expr;

JOIN,CROSS JOIN 和 INNER JOIN是等价。
LEFT [OUTER] JOIN,左连接。
RIGHT [OUTER] JOIN 右连接

连接条件：
使用ON关键字来设定连接条件，也可以使用WHERE来替换。
通常用ON关键字来设定连接条件，
使用WHERE关键字进行结果集记录的过滤。
PS:
MariaDB [king]> SELECT goods_id,goods_name,cate_name FROM tdb_goods AS G INNER JOIN tdb_goods_cates AS C ON G.cate_id = C.cate_id;

MariaDB [king]> SELECT goods_id,goods_name,cate_name FROM tdb_goods AS G LEFT JOIN tdb_goods_cates AS C ON G.cate_id = C.cate_id;

MariaDB [king]> SELECT goods_id,goods_name,cate_name FROM tdb_goods AS G RIGHT JOIN tdb_goods_cates AS C ON G.cate_id = C.cate_id\G;

自身连接：同一个数据表对其自身进行连接。
-- 无限分类的数据表设计

   CREATE TABLE tdb_goods_types(
     type_id   SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
     type_name VARCHAR(20) NOT NULL,
     parent_id SMALLINT UNSIGNED NOT NULL DEFAULT 0
  ); 

  INSERT tdb_goods_types(type_name,parent_id) VALUES('家用电器',DEFAULT);
  INSERT tdb_goods_types(type_name,parent_id) VALUES('电脑、办公',DEFAULT);
  INSERT tdb_goods_types(type_name,parent_id) VALUES('大家电',1);
  INSERT tdb_goods_types(type_name,parent_id) VALUES('生活电器',1);
  INSERT tdb_goods_types(type_name,parent_id) VALUES('平板电视',3);
  INSERT tdb_goods_types(type_name,parent_id) VALUES('空调',3);
  INSERT tdb_goods_types(type_name,parent_id) VALUES('电风扇',4);
  INSERT tdb_goods_types(type_name,parent_id) VALUES('饮水机',4);
  INSERT tdb_goods_types(type_name,parent_id) VALUES('电脑整机',2);
  INSERT tdb_goods_types(type_name,parent_id) VALUES('电脑配件',2);
  INSERT tdb_goods_types(type_name,parent_id) VALUES('笔记本',9);
  INSERT tdb_goods_types(type_name,parent_id) VALUES('超级本',9);
  INSERT tdb_goods_types(type_name,parent_id) VALUES('游戏本',9);
  INSERT tdb_goods_types(type_name,parent_id) VALUES('CPU',10);
  INSERT tdb_goods_types(type_name,parent_id) VALUES('主机',10);

PS:
MariaDB [king]> SELECT s.type_id,s.type_name,p.type_name FROM tdb_goods_types AS s LEFT JOIN tdb_goods_types AS p
    -> ON  s.parent_id = p.type_id;

注意与上面一条的区别：
MariaDB [king]> SELECT s.type_id,s.type_name,p.type_name FROM tdb_goods_types AS s LEFT JOIN tdb_goods_types AS p
    -> ON p.parent_id = s.type_id;

MariaDB [king]> SELECT s.type_id,s.type_name,COUNT(p.type_name) FROM tdb_goods_types AS s LEFT JOIN tdb_goods_types AS p ON p.parent_id = s.type_id GROUP BY s.type_name ORDER BY type_id ASC;


多表删除：
DELETE table_name [.*] [,table[.*]]...
FROM table_references [WHERE where_condition];

-- 查找重复记录
  SELECT goods_id,goods_name FROM tdb_goods GROUP BY goods_name HAVING count(goods_name) >= 2;

-- 删除重复记录
  DELETE t1 FROM tdb_goods AS t1 LEFT JOIN (SELECT goods_id,goods_name FROM tdb_goods GROUP BY goods_name HAVING count(goods_name) >= 2 ) AS t2  ON t1.goods_name = t2.goods_name  WHERE t1.goods_id > t2.goods_id;

[函数]

字符函数：
CONCAT() 字符连接
CONCAT_WS() 使用指定的分隔符进行字符连接
FORMAT() 数字格式化(返回的结果是字符型）
LOWER() 转换成小写字母
UPPER() 转换成大写字母
LEFT()  获取左侧字符
RIGHT() 获取右侧字符
LENGTH()    获取字符串长度
LIRIM() 删除前导空格
RTRIM() 删除后续空格
TRIM() 删除前导和后续空格
SUBSTRING()  字符串截取
[NOT] LIKE 模式匹配
REPLACE()   字符串替换

PS:
MariaDB [king]> SELECT CONCAT('Hellow','World');
MariaDB [king]> SELECT CONCAT('Hellow','_','World');
MariaDB [king]> SELECT CONCAT(first_name,last_name) AS fullname FROM test;
MariaDB [king]> SELECT CONCAT_WS('|','XIAO','JING','GOOD');
MariaDB [king]> SELECT FORMAT(123456.78,2);
MariaDB [king]> SELECT LOWER('hAINing');
MariaDB [king]> SELECT UPPER('hAINing');
MariaDB [king]> SELECT LEFT('xiaojing',2);
MariaDB [king]> SELECT UPPER(RIGHT('xiaojing',3));
MariaDB [king]> SELECT LENGTH('XIAOJING');
MariaDB [king]> SELECT LENGTH(LTRIM(' xiaojing'));
MariaDB [king]> SELECT LENGTH(RTRIM('xiaojing   '));
MariaDB [king]> SELECT LENGTH(TRIM('  xiaojing   '));
MariaDB [king]> SELECT TRIM(LEADING '?' FROM '??mysql???');
MariaDB [king]> SELECT TRIM(TRAILING '?' FROM '??mysql???');
MariaDB [king]> SELECT TRIM(BOTH '?' FROM '??mysql???');
MariaDB [king]> SELECT REPLACE('**MY*SQL***','*','!');
MariaDB [king]> SELECT SUBSTRING('MySQL',3,2);
MariaDB [king]> SELECT * FROM test WHERE first_name LIKE '%ao%';
MariaDB [king]> SELECT * FROM test WHERE first_name LIKE '%1%%' ESCAPE '1';(查找含有百分号的first_name字段)

%百分号，任意个字符
_下划线，任意一个字符

数值运算符：
CEIL()  进一取整
DIV 整数除法
FLOOR() 舍一取整
MOD 取余数(取模）
POWER() 幂运算 
ROUND() 四舍五入
TRUNCATE()  数字截取

ps:
MariaDB [king]> SELECT 3+2;
MariaDB [king]> SELECT CEIL(3.2);
MariaDB [king]> SELECT FLOOR(3.9);
MariaDB [king]> SELECT 3/4;
MariaDB [king]> SELECT 3 DIV 4;
MariaDB [king]> SELECT 6 DIV 3;
MariaDB [king]> SELECT 5%3;
MariaDB [king]> SELECT 5 MOD 3;
MariaDB [king]> SELECT POWER(2,3);
MariaDB [king]> SELECT ROUND(3.2);
MariaDB [king]> SELECT ROUND(3.7);
MariaDB [king]> SELECT ROUND(3.652,2);
MariaDB [king]> SELECT ROUND(3.652,1);
MariaDB [king]> SELECT ROUND(3.652,0);
MariaDB [king]> SELECT TRUNCATE(125.89,1);
MariaDB [king]> SELECT TRUNCATE(125.89,0);


比较运算符：
[NOT] BETWEEN...AND... [不]在范围之内
[NOT] IN()  [不]在列出值范围内
IS [NOT]NULL    [不]为空

PS:
MariaDB [king]> SELECT 10 BETWEEN 1 AND 20;
MariaDB [king]> SELECT 10 BETWEEN 1 AND 2;
MariaDB [king]> SELECT 10 IN(10,20,30);
MariaDB [king]> SELECT 17 IN(10,20,30);
MariaDB [king]> SELECT * FROM test WHERE first_name IS NULL;


日期时间函数：
NOW()   当前日期和时间
CURDATE()   当前日期
CURTIME()   当前时间
DATE_ADD()  日期变化
DATEDIFF()  日期差值
DATE_FORMAT()   日期格式化
ps:
MariaDB [king]> SELECT NOW();
MariaDB [king]> SELECT CURDATE();
MariaDB [king]> SELECT CURTIME();
MariaDB [king]> SELECT DATE_ADD('2014-3-12',INTERVAL 365 DAY);
MariaDB [king]> SELECT DATE_ADD('2014-3-12',INTERVAL -365 DAY);
MariaDB [king]> SELECT DATE_ADD('2014-3-12',INTERVAL 1 YEAR);
MariMariaDB [king]> SELECT DATEDIFF('2013-3-12','2014-3-12');
MariMariaDB [king]> SELECT DATE_ADD('2014-3-12',INTERVAL 3 WEEK);
MariaDB [king]> SELECT DATE_FORMAT('2014-3-12','%m/%d/%Y');



信息函数：
CONNECTION_ID()  连接ID
DATABASE() 当前数据库
LAST_INSERT_ID() 最后插入记录的ID号.(但如果同时插入多条记录，只能输出第一条插入的ID）
USER() 当前用户
VSERSION() 版本信息
PS:
MariaDB [king]> SELECT CONNECTION_ID();
MariaDB [king]> SELECT DATABASE();
MariaDB [king]> SELECT LAST_INSERT_ID();
MariaDB [king]> SELECT USER();
MariaDB [king]> SELECT VERSION();



聚合函数：
AVG() 平均值
COUNT() 计数
MAX() 最大值
MIN() 最小值
SUM() 求值
ps:
MariaDB [king]> SELECT AVG(id) FROM test;
MariaDB [king]> SELECT COUNT(id) FROM test;
MariaDB [king]> SELECT MAX(id) FROM test;
MariaDB [king]> SELECT MIN(id) FROM test;
MariaDB [king]> SELECT SUM(id) FROM test;


加密函数：
MD5() 信息摘要算法
PASSWORD() 密码算法
ps:
MariaDB [king]> SELECT MD5('123456');

[自定义函数]
CREATE FUNCTION function_name
RET URNS
{STRING|INTEGER|REAL|DECIMAL}
routine_body;
PS:
MariaDB [king]> CREATE FUNCTION  f1() RETURNS VARCHAR(30)
    -> RETURN DATE_FORMAT(NOW(),'%Y/%m/%d');

MariaDB [king]> CREATE FUNCTION f2(num1 SMALLINT UNSIGNED,num2 SMALLINT UNSIGNED)
    -> RETURNS FLOAT(10,2) UNSIGNED
    -> RETURN (num1+num2)/2;

创建具有复合结构函数体的自定义函数
修改语句结束符为$$:
MariaDB [king]> DELIMITER $$
MariaDB [king]> CREATE FUNCTION adduser(username VARCHAR(20))
    -> RETURNS INT UNSIGNED
    -> BEGIN
    -> INSERT test(username) VALUES(username);
    -> RETURN LAST_INSERT_ID();
    -> END
    -> $$


//查看自定义函数
SHOW FUCNTION STATUS LIKE 'function_name';
SHOW  CREATE FUNCTION function_name;

//删除自定义函数
DROP FUNCTION [IF EXISTS] function_name;
-----------------------------------------------------
-----------------------------------------------------
-----------------------------------------------------
leaning to this:
MySQL 修改数据表--删除约束，与MySQL的零距离接触教程-慕课网
-----------------------------------------------------
-----------------------------------------------------
-----------------------------------------------------
-----------------------------------------------------
